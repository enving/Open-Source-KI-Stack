volumes:
  open-webui:
  # searxng:
  n8n:
  qdrant-data:
  postgres-owui-data:
  postgres-n8n-data:

networks:
  xx-network:
    driver: bridge

services:
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    restart: always
    networks:
      - xx-network
    ports:
      - "3000:8080"
    volumes:
      - open-webui:/app/backend/data
    depends_on:
      db-init: # Let it populate the database before owui starts
        condition: service_completed_successfully
      qdrant:
        condition: service_started
    environment:
      - LOG_LEVEL=INFO
      - DISABLE_SIGNUP=True
      - WEBUI_NAME=${WEBUI_NAME}
      - ENABLE_OPENAI_API=true
      - EMBEDDINGS_PROVIDER=openai # das ist nur das Format der Daten die wir haben. Kommt nicht wirklich von openai
      - DATABASE_URL=postgresql://owui_user:${POSTGRES_OWUI_PASSWORD:-dev_pwd}@postgres-owui:5432/openwebui
    env_file:
      - .env          # Für sensible Daten

  # For reverse proxy:
  # nginx:
  #   image: nginx:mainline
  #   container_name: nginx
  #   ports:
  #     - "0.0.0.0:80:80"
  #     - "0.0.0.0:443:443"
  #   volumes:
  #     - ./conf.d:/etc/nginx/conf.d
  #     - ./ssl:/etc/nginx/ssl
  #   depends_on:
  #     - openwebui
  #     - searxng
  #   restart: unless-stopped
  #   networks:
  #     - xx-network
  #   environment:
  #     - WEBUI_NAME=xx

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: always
    networks:
      - xx-network
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    environment:
      - QDRANT_ALLOW_CORS=true

  # searxng:
  #     image: searxng/searxng
  #     container_name: searxng
  #     restart: always
  #     networks:
  #       # - zugchat-network
  #       - xx-network # for now, as zugchat-network is not available
  #     ports:
  #       - "8081:8080"  # Geändert auf 8081 um Konflikte zu vermeiden
  #     volumes:
  #       - searxng:/etc/searxng
  #       - ./settings.yml:/etc/searxng/settings.yml
  #     environment:
  #       - BASE_URL=http://searxng:8080/  # Geändert auf den Container-Namen
  #       - INSTANCE_NAME=xx Search
  #       - UWSGI_WORKERS=4
  #       - UWSGI_THREADS=2

  n8n:
    image: n8nio/n8n
    container_name: n8n
    restart: always
    networks:
      - xx-network
    ports:
      - "5678:5678"
    volumes:
      - n8n:/home/node/.n8n
    depends_on:
      db-init: # Let it populate the database before n8n starts
          condition: service_completed_successfully
    environment:
      - GENERIC_TIMEZONE=Europe/Berlin
      - N8N_HOST=n8n
      - N8N_PORT=5678
      - N8N_EDITOR_BASE_URL=http://localhost:5678
      - WEBHOOK_URL=http://localhost:5678
      - N8N_RUNNERS_ENABLED=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true

      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres-n8n
      - DB_POSTGRESDB_PORT=5432 # Connecting internally to the postgres container
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_N8N_PASSWORD:-dev_pwd}
    env_file:
      - .env
  
  postgres-owui:
    image: postgres:16
    container_name: postgres-owui
    restart: always
    networks:
      - xx-network
    ports:
      - "5435:5432"
    volumes:
      - postgres-owui-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=openwebui
      - POSTGRES_USER=owui_user
      - POSTGRES_PASSWORD=${POSTGRES_OWUI_PASSWORD:-dev_pwd}
    env_file:
      - .env

  postgres-n8n:
    image: postgres:16
    container_name: postgres-n8n
    restart: always
    networks:
      - xx-network
    ports:
      - "5434:5432"
    volumes:
      - postgres-n8n-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n_user
      - POSTGRES_PASSWORD=${POSTGRES_N8N_PASSWORD:-dev_pwd}
    env_file:
      - .env

  # For the initial population of the databases
  db-init:
    build:
      context: .
      dockerfile: Dockerfile.db_init
    container_name: db-init
    depends_on:
      - postgres-n8n
      - qdrant
    networks:
      - xx-network
    entrypoint: ["/bin/sh", "-c"]
    command: ["sh /db_init/scripts/entrypoint.sh"]
    volumes:
      - ./db_init:/db_init:ro
