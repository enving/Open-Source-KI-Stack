volumes:
  open-webui:
  searxng:
  n8n:
  qdrant-data:
  docling-data:
  redis-data:
  postgres-owui-data:
  postgres-n8n-data:


networks:
  xx-network:
    driver: bridge

services:
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    restart: always
    networks:
      - xx-network
    ports:
      - "3000:8080"
    volumes:
      - open-webui:/app/backend/data
    depends_on:
      db-init: # Let it populate the database before owui starts
        condition: service_completed_successfully
      qdrant:
        condition: service_started
      docling-serve:
        condition: service_started
      #redis:
      #  condition: service_started
    environment:
      - LOG_LEVEL=INFO                        # Debugging
      - DISABLE_SIGNUP=True                   # Registrierung steuern
      - WEBUI_NAME=${WEBUI_NAME}
      # Redis Konfiguration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-your_secure_password}@redis:6379/0
      - WEBSOCKET_MANAGER=redis
      - WEBSOCKET_REDIS_URL=redis://:${REDIS_PASSWORD:-your_secure_password}@redis:6379/0
      - ENABLE_WEBSOCKET_SUPPORT=true
      # PostgreSQL Konfiguration (IONOS Managed)
      - DATABASE_URL=${IONOS_POSTGRES_URL}?sslmode=require&connect_timeout=10
      - DATABASE_POOL_SIZE=50
      - DATABASE_POOL_MAX_OVERFLOW=20
      - DATABASE_POOL_TIMEOUT=60
      - DATABASE_POOL_RECYCLE=1800
      - DATABASE_POOL_PRE_PING=true
      # LDAP Konfiguration (Microsoft Entra ID) - AUSKOMMENTIERT
      #- ENABLE_LDAP=true
      #- LDAP_SERVER=ldaps://login.microsoftonline.com
      #- LDAP_PORT=636
      #- LDAP_BASE_DN=DC=yourdomain,DC=com
      #- LDAP_BIND_DN=CN=ServiceAccount,DC=yourdomain,DC=com
      #- LDAP_BIND_PASSWORD=${LDAP_BIND_PASSWORD}
      #- LDAP_USER_SEARCH_BASE=DC=yourdomain,DC=com
      #- LDAP_USER_SEARCH_FILTER=(sAMAccountName={username})
      #- LDAP_USER_ATTRIBUTES=mail,displayName,memberOf
      #- LDAP_GROUP_SEARCH_BASE=DC=yourdomain,DC=com
      #- LDAP_GROUP_SEARCH_FILTER=(objectClass=group)
      #- LDAP_GROUP_ATTRIBUTES=cn,member
      #- LDAP_ADMIN_GROUP=CN=OpenWebUI-Admins,DC=yourdomain,DC=com
      # Qdrant Konfiguration
      # Docling Konfiguration
      - DOCLING_SERVER_URL=http://docling-serve:5001
      - DOCLING_OCR_ENGINE=auto
      - DOCLING_OCR_LANG=deu
      - DOCLING_DO_PICTURE_DESCRIPTION=true


  nginx:
    image: nginx:mainline
    container_name: nginx
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
    volumes:
      - ./conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - openwebui
      - searxng
    restart: unless-stopped
    networks:
      - xx-network
    environment:
      - WEBUI_NAME=xx

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: always
    networks:
      - xx-network
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    environment:
      - QDRANT_ALLOW_CORS=true

  searxng:
      image: searxng/searxng
      container_name: searxng
      restart: always
      networks:
        - xx-network
      ports:
        - "8081:8080"  # Geändert auf 8081 um Konflikte zu vermeiden
      volumes:
        - searxng:/etc/searxng
        - ./settings.yml:/etc/searxng/settings.yml
      environment:
        - BASE_URL=http://searxng:8080/  # Geändert auf den Container-Namen
        - INSTANCE_NAME=Safe Search Engine
        - UWSGI_WORKERS=4
        - UWSGI_THREADS=2

  docling-serve:
    image: ghcr.io/docling-project/docling-serve:latest
    container_name: docling-serve
    restart: always
    networks:
      - xx-network
    ports:
      - "8082:5001"
    volumes:
      - docling-data:/app/data
    environment:
      - DOCLING_API_KEY=${DOCLING_API_KEY:-default_key}
      - DOCLING_SERVE_ENABLE_UI=true
      - DOCLING_SERVE_HOST=0.0.0.0
      - DOCLING_SERVE_PORT=5001
      - DOCLING_SERVE_ALLOW_ORIGINS=["*"]
      # Qdrant Konfiguration für Docling
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_API_KEY=${QDRANT_API_KEY:-sfsfsfsfsfsfssf}
      - QDRANT_COLLECTION_NAME=docling
    depends_on:
      - qdrant

# for performance 
  # redis:
  #   image: redis:7-alpine
  #   container_name: redis
  #   restart: always
  #   networks:
  #     - xx-network
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-data:/data
  #   command: redis-server --appendonly yes --maxmemory 4gb --maxmemory-policy allkeys-lru
  #   environment:
  #     - REDIS_PASSWORD=${REDIS_PASSWORD:-your_secure_password}

  n8n:
    image: n8nio/n8n
    container_name: n8n
    restart: always
    networks:
      - xx-network
    ports:
      - "5678:5678"
    volumes:
      - n8n:/home/node/.n8n
    depends_on:
      db-init: # Let it populate the database before n8n starts
          condition: service_completed_successfully
    environment:
      - GENERIC_TIMEZONE=Europe/Berlin
      - N8N_HOST=n8n
      - N8N_PORT=5678
      - N8N_EDITOR_BASE_URL=http://localhost:5678
      - WEBHOOK_URL=http://localhost:5678
      - N8N_RUNNERS_ENABLED=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true

      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres-n8n
      - DB_POSTGRESDB_PORT=5432 # Connecting internally to the postgres container
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_N8N_PASSWORD:-dev_pwd}
    env_file:
      - .env

  postgres-owui:
    image: postgres:16
    container_name: postgres-owui
    restart: always
    networks:
      - xx-network
    ports:
      - "5435:5432"
    volumes:
      - postgres-owui-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=openwebui
      - POSTGRES_USER=owui_user
      - POSTGRES_PASSWORD=${POSTGRES_OWUI_PASSWORD:-dev_pwd}
    env_file:
      - .env

  postgres-n8n:
    image: postgres:16
    container_name: postgres-n8n
    restart: always
    networks:
      - xx-network
    ports:
      - "5434:5432"
    volumes:
      - postgres-n8n-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n_user
      - POSTGRES_PASSWORD=${POSTGRES_N8N_PASSWORD:-dev_pwd}
    env_file:
      - .env

# For the initial population of the databases
  db-init:
    build:
      context: .
      dockerfile: Dockerfile.db_init
    container_name: db-init
    depends_on:
      - postgres-n8n
      - qdrant
    networks:
      - xx-network
    entrypoint: ["/bin/sh", "-c"]
    command: ["sh /db_init/scripts/entrypoint.sh"]
    volumes:
      - ./db_init:/db_init:ro